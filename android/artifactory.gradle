////#############deploy自动生成###########///
allprojects {
    repositories {
        maven { url 'http://repo.jfrog.org/artifactory/gradle-plugins' }
        jcenter()
        maven {
            url "https://jitpack.io"
        }
        maven { url 'https://maven.google.com' }
    }
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}
}

subprojects {
    //artifactory相关
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    //读取module的version
    publishing {
        publications {
            aar(MavenPublication) {
                def libVersion = '1.0.1'

                if (libVersion == null)
                    return
                //just push android lib
                def isJar=false
                if(project.plugins.toString().contains("JavaPlugin")){
                    isJar=true
                }
                groupId 'com.example.test'
                version = libVersion
                artifactId project.getName()

                // Tell maven to prepare the generated "*.aar" file for publishing
                if(isJar){
                    artifact("${buildDir}/libs/${project.getName()}.jar")
                }else{
                    artifact("${buildDir}/outputs/aar/${project.getName()}-release.aar")
                }
                //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                pom.withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames;
                    if(!isJar){
                          try{project.configurations.getByName("implementation")
                              configurationNames=  ["releaseCompile", 'compile','api','implementation']
                           }catch(Exception e){
                            configurationNames=  ["releaseCompile", 'compile']
                               }     
                    }else{
                        configurationNames=['compile']
                    }
                    configurationNames.each { configurationName ->
                        project.configurations.getByName(configurationName).allDependencies.each {
                            if (it.group != null && it.name != null && it.group != project.parent.name) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    artifactory {//artifactory配置
        contextUrl = "http://127.0.0.1:8081/artifactory/list/"
        //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey ="example-repo-local"
                username = "admin"
                password = "password"
                maven = true
            }
            defaults {
                // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
                publications('aar')
                publishArtifacts = true

                // PropertyUtil to be attached to the published artifacts.
                properties = ['qa.level': 'basic', 'dev.team': 'core']
                // Publish generated POM files to Artifactory (true by default)
                publishPom = true //Publish generated POM files to Artifactory (true by default)
                publishIvy = false
                //Publish generated Ivy descriptor files to Artifactory (true by default)
            }

        }
    }
}


